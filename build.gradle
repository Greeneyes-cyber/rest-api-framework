buildscript {
    ext.kotlin_version = '1.3.60'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply(plugin: 'java')
apply(plugin: 'kotlin')
apply(plugin: 'maven-publish')
apply(plugin: 'java-library')

version = '1.0.0'
def appName = 'rest-api-framework'

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs += 'src/main/java'
    main.kotlin.srcDirs += 'src/main/kotlin'
}

dependencies {
    // Logback
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.2'

    // Java X WS RS
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.27'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1'

    // テスト系
    testCompile 'org.junit.jupiter:junit-jupiter:5.6.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

publishing {
    repositories {
        maven {
            name = "github"
            url = "https://maven.pkg.github.com/simonNozaki"
            credentials {
                username = project.hasProperty("GITHUB_USER")
                password = project.hasProperty("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        verbose = true
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

wrapper {
    gradleVersion('6.0')
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'Main'
    }
}